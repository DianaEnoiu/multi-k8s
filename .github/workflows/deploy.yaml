name: Build and Deploy to gke

on:
  push: 
    branches:
      - master

env: 
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: multi-cluster    # Add your cluster name here.
  GKE_ZONE: europe-central2-a  # Add your cluster zone here.
  GAR_LOCATION: europe

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Configure Workload Identity Federation and generate an access token.
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v0'
      with:
        token_format: 'access_token'
        workload_identity_provider: 'projects/635583789319/locations/global/workloadIdentityPools/git-identity-pool/providers/gitprovider'
        service_account: 'git-service-account@multi-k8s-362511.iam.gserviceaccount.com'

    # Alternative option - authentication via credentials json
    # - id: 'auth'
    #   uses: 'google-github-actions/auth@v0'
    #   with:
    #     credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

# # Configure Docker to use the gcloud command-line tool as a credential
#     # helper for authentication
#     - run: |-
#         gcloud --quiet auth configure-docker

#     - uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
#       with:
#         cluster_name: ${{ env.GKE_CLUSTER }}
#         location: ${{ env.GKE_ZONE }}
#         credentials: ${{ secrets.GKE_SA_KEY }}



    - name: Docker configuration
      run: |-
        echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev
    # Get the GKE credentials so we can deploy to the cluster
    - name: Set up GKE credentials
      uses: google-github-actions/get-gke-credentials@v0
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}


    # Build the Docker image
    - name: Build
      run: |-
        cd client && docker build -f Dockerfile -t dianaenoiu/client:latest dianaenoiu/client:$GITHUB_SHA . && cd - && \
        cd server && docker build -f Dockerfile -t dianaenoiu/server:latest dianaenoiu/server:$GITHUB_SHA . && cd - &&\
        cd worker && docker build -f Dockerfile -t dianaenoiu/worker:latest dianaenoiu/worker:$GITHUB_SHA . && cd -
          
        
      
    # Push the Docker image to Google Artifact Registry
    - name: Publish
      run: |-
        docker push "$GAR_LOCATION-docker.pkg.dev/multi-k8s-362511/k8s/client:latest" &&\
        docker push "$GAR_LOCATION-docker.pkg.dev/multi-k8s-362511/server:latest" &&\ 
        docker push "$GAR_LOCATION-docker.pkg.dev/multi-k8s-362511/worker:latest" 
     #   docker pull redis  && \
     #   docker pull postgress 



    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |-
        # replacing the image name in the k8s template
        kubectl apply -f -
        kubectl rollout status deployment/client-deployment
        kubectl rollout status deployment/server-deployment
        kubectl rollout status deployment/worker-deployment
        kubectl rollout status deployment/redis-deployment
        kubectl rollout status deployment/postgres-deployment
        kubectl get services -o wide  